//from bash in sparkfolder

./bin/spark-shell --packages com.databricks:spark-csv_2.11:1.4.0 

//Copy all this and paste:
import org.apache.spark.sql.SQLContext
import org.apache.spark.sql.types.{StructType, StructField, StringType, IntegerType, DoubleType}
import org.apache.spark.mllib.regression.{LabeledPoint}
import org.apache.spark.mllib.linalg.{Vector, Vectors}
import org.apache.spark.ml.feature.VectorAssembler
val knownCustTrainSchema = StructType(
  Array(
    StructField("voucherid" , DoubleType, true),
    StructField("customerid" , DoubleType, true),
    StructField("colorcode" , DoubleType, true),
    StructField("deviceid" , DoubleType, true),
    StructField("day in month" , DoubleType, true),
    StructField("month_of_year" , DoubleType, true),
    StructField("day_of_week" , DoubleType, true),
    StructField("quarter" , DoubleType, true),
    StructField("paymentmethod" , DoubleType, true),
    StructField("has_voucher" , DoubleType, true),
    StructField("NewProductGroup" , DoubleType, true),
    StructField("NewSizeCode" , DoubleType, true),
    StructField("new_paymentmethod" , DoubleType, true),
    StructField("sizecode" , DoubleType, true),
    StructField("orderid" , DoubleType, true),
    StructField("articleid" , DoubleType, true),
    StructField("productgroup" , DoubleType, true),
    StructField("sizes" , DoubleType, true),
    StructField("colors" , DoubleType, true),
    StructField("year_and_month" , DoubleType, true),
    StructField("orderdate" , DoubleType, true),
    StructField("quantity" , DoubleType, true),
    StructField("price" , DoubleType, true),
    StructField("rrp" , DoubleType, true),
    StructField("voucheramount" , DoubleType, true),
    StructField("price_per_item" , DoubleType, true),
    StructField("price_to_rrp_ratio" , DoubleType, true),
    StructField("usual_price_ratio" , DoubleType, true),
    StructField("color_ral_group" , DoubleType, true),
    StructField("article_average_price" , DoubleType, true),
    StructField("article_cheapest_price" , DoubleType, true),
    StructField("article_most_expensive_price" , DoubleType, true),
    StructField("article_number_of_different_prices" , DoubleType, true),
    StructField("total_order_price" , DoubleType, true),
    StructField("different_sizes" , DoubleType, true),
    StructField("different_colors" , DoubleType, true),
    StructField("color_returned_times" , DoubleType, true),
    StructField("color_bought_times" , DoubleType, true),
    StructField("color_returned_ratio" , DoubleType, true),
    StructField("size_returned_times" , DoubleType, true),
    StructField("size_bought_times" , DoubleType, true),
    StructField("size_returned_ratio" , DoubleType, true),
    StructField("customer_sum_quantities" , DoubleType, true),
    StructField("customer_sum_returns" , DoubleType, true),
    StructField("customer_return_ratio" , DoubleType, true),
    StructField("returnquantity" , DoubleType, true),
    StructField("id" , DoubleType, true)
    )
  )
val knownTrainLoad = sqlContext.read .format("com.databricks.spark.csv") .option("header", "true") .option("delimiter", ";") .schema(knownCustTrainSchema) .load("/home/axel/Skrivbord/allAttributesNumeric/dm2_train_and_test_v3.numeric/dm2_train_known_customer_v3.numeric.csv")
// .select to get the same order of the attributes (this is done for all four datasets)
val knownTrain = knownTrainLoad.select(
    "voucherid" , 
    "colorcode" , 
    "deviceid" , 
    "day in month" , 
    "month_of_year" , 
    "day_of_week" , 
    "quarter" , 
    "paymentmethod" , 
    "has_voucher" , 
    "NewProductGroup" , 
    "NewSizeCode" , 
    "new_paymentmethod" , 
    "sizecode" , 
    "orderid" , 
    "articleid" , 
    "productgroup" , 
    "sizes" , 
    "colors" , 
    "year_and_month" , 
    "orderdate" , 
    "quantity" , 
    "price" , 
    "rrp" , 
    "voucheramount" , 
    "price_per_item" , 
    "price_to_rrp_ratio" , 
    "usual_price_ratio" , 
    "color_ral_group" , 
    "article_average_price" , 
    "article_cheapest_price" , 
    "article_most_expensive_price" , 
    "article_number_of_different_prices" , 
    "total_order_price" , 
    "different_sizes" , 
    "different_colors" , 
    "customerid" , 
    "color_returned_times" , 
    "color_bought_times" , 
    "color_returned_ratio" , 
    "size_returned_times" , 
    "size_bought_times" , 
    "size_returned_ratio" , 
    "customer_sum_quantities" , 
    "customer_sum_returns" , 
    "customer_return_ratio" , 
    "id" ,
    "returnquantity" 
    )
val knownCustTestSchema = StructType(
  Array(
    StructField("customerid" , DoubleType, true),
    StructField("size_bought_times" , DoubleType, true),
    StructField("size_returned_ratio" , DoubleType, true),
    StructField("size_returned_times" , DoubleType, true),
    StructField("color_bought_times" , DoubleType, true),
    StructField("color_returned_ratio" , DoubleType, true),
    StructField("color_returned_times" , DoubleType, true),
    StructField("customer_return_ratio" , DoubleType, true),
    StructField("customer_sum_quantities" , DoubleType, true),
    StructField("customer_sum_returns" , DoubleType, true),
    StructField("voucherid" , DoubleType, true),
    StructField("colorcode" , DoubleType, true),
    StructField("deviceid" , DoubleType, true),
    StructField("day in month" , DoubleType, true),
    StructField("month_of_year" , DoubleType, true),
    StructField("day_of_week" , DoubleType, true),
    StructField("quarter" , DoubleType, true),
    StructField("paymentmethod" , DoubleType, true),
    StructField("has_voucher" , DoubleType, true),
    StructField("NewProductGroup" , DoubleType, true),
    StructField("NewSizeCode" , DoubleType, true),
    StructField("new_paymentmethod" , DoubleType, true),
    StructField("sizecode" , DoubleType, true),
    StructField("orderid" , DoubleType, true),
    StructField("articleid" , DoubleType, true),
    StructField("productgroup" , DoubleType, true),
    StructField("sizes" , DoubleType, true),
    StructField("orderdate" , DoubleType, true),
    StructField("colors" , DoubleType, true),
    StructField("year_and_month" , DoubleType, true),
    StructField("quantity" , DoubleType, true),
    StructField("price" , DoubleType, true),
    StructField("rrp" , DoubleType, true),
    StructField("voucheramount" , DoubleType, true),
    StructField("price_per_item" , DoubleType, true),
    StructField("price_to_rrp_ratio" , DoubleType, true),
    StructField("usual_price_ratio" , DoubleType, true),
    StructField("color_ral_group" , DoubleType, true),
    StructField("article_average_price" , DoubleType, true),
    StructField("article_cheapest_price" , DoubleType, true),
    StructField("article_most_expensive_price" , DoubleType, true),
    StructField("article_number_of_different_prices" , DoubleType, true),
    StructField("total_order_price" , DoubleType, true),
    StructField("different_sizes" , DoubleType, true),
    StructField("different_colors" , DoubleType, true),
    StructField("returnquantity" , DoubleType, true),
    StructField("id" , DoubleType, true)
    )
  )
val knownTestLoad = sqlContext.read .format("com.databricks.spark.csv") .option("header", "true") .option("delimiter", ";") .schema(knownCustTestSchema) .load("/home/axel/Skrivbord/allAttributesNumeric/dm2_train_and_test_v3.numeric/dm2_test_kwown_customers_v3.numeric.csv")
val knownTest = knownTestLoad.select(
    "voucherid" , 
    "colorcode" , 
    "deviceid" , 
    "day in month" , 
    "month_of_year" , 
    "day_of_week" , 
    "quarter" , 
    "paymentmethod" , 
    "has_voucher" , 
    "NewProductGroup" , 
    "NewSizeCode" , 
    "new_paymentmethod" , 
    "sizecode" , 
    "orderid" , 
    "articleid" , 
    "productgroup" , 
    "sizes" , 
    "colors" , 
    "year_and_month" , 
    "orderdate" , 
    "quantity" , 
    "price" , 
    "rrp" , 
    "voucheramount" , 
    "price_per_item" , 
    "price_to_rrp_ratio" , 
    "usual_price_ratio" , 
    "color_ral_group" , 
    "article_average_price" , 
    "article_cheapest_price" , 
    "article_most_expensive_price" , 
    "article_number_of_different_prices" , 
    "total_order_price" , 
    "different_sizes" , 
    "different_colors" , 
    "customerid" , 
    "color_returned_times" , 
    "color_bought_times" , 
    "color_returned_ratio" , 
    "size_returned_times" , 
    "size_bought_times" , 
    "size_returned_ratio" , 
    "customer_sum_quantities" , 
    "customer_sum_returns" , 
    "customer_return_ratio" , 
    "id" ,
    "returnquantity" 
    )
val newCustTrainSchema = StructType(
    Array(
    StructField("voucherid" , DoubleType, true),
    StructField("colorcode" , DoubleType, true),
    StructField("deviceid" , DoubleType, true),
    StructField("day in month" , DoubleType, true),
    StructField("month_of_year" , DoubleType, true),
    StructField("day_of_week" , DoubleType, true),
    StructField("quarter" , DoubleType, true),
    StructField("paymentmethod" , DoubleType, true),
    StructField("has_voucher" , DoubleType, true),
    StructField("NewProductGroup" , DoubleType, true),
    StructField("NewSizeCode" , DoubleType, true),
    StructField("new_paymentmethod" , DoubleType, true),
    StructField("sizecode" , DoubleType, true),
    StructField("orderid" , DoubleType, true),
    StructField("articleid" , DoubleType, true),
    StructField("productgroup" , DoubleType, true),
    StructField("sizes" , DoubleType, true),
    StructField("colors" , DoubleType, true),
    StructField("year_and_month" , DoubleType, true),
    StructField("orderdate" , DoubleType, true),
    StructField("quantity" , DoubleType, true),
    StructField("price" , DoubleType, true),
    StructField("rrp" , DoubleType, true),
    StructField("voucheramount" , DoubleType, true),
    StructField("price_per_item" , DoubleType, true),
    StructField("price_to_rrp_ratio" , DoubleType, true),
    StructField("usual_price_ratio" , DoubleType, true),
    StructField("color_ral_group" , DoubleType, true),
    StructField("article_average_price" , DoubleType, true),
    StructField("article_cheapest_price" , DoubleType, true),
    StructField("article_most_expensive_price" , DoubleType, true),
    StructField("article_number_of_different_prices" , DoubleType, true),
    StructField("total_order_price" , DoubleType, true),
    StructField("different_sizes" , DoubleType, true),
    StructField("different_colors" , DoubleType, true),
    StructField("returnquantity" , DoubleType, true),
    StructField("id" , DoubleType, true)
        )
    )
val newTrainLoad = sqlContext.read .format("com.databricks.spark.csv") .option("header", "true") .option("delimiter", ";") .schema(newCustTrainSchema) .load("/home/axel/Skrivbord/allAttributesNumeric/dm2_train_and_test_v3.numeric/dm2_train_new_customer_v3.numeric.csv")
val newTrain = newTrainLoad.select(
    "voucherid" , 
    "colorcode" , 
    "deviceid" , 
    "day in month" , 
    "month_of_year" , 
    "day_of_week" , 
    "quarter" , 
    "paymentmethod" , 
    "has_voucher" , 
    "NewProductGroup" , 
    "NewSizeCode" , 
    "new_paymentmethod" , 
    "sizecode" , 
    "orderid" , 
    "articleid" , 
    "productgroup" , 
    "sizes" , 
    "colors" , 
    "year_and_month" , 
    "orderdate" , 
    "quantity" , 
    "price" , 
    "rrp" , 
    "voucheramount" , 
    "price_per_item" , 
    "price_to_rrp_ratio" , 
    "usual_price_ratio" , 
    "color_ral_group" , 
    "article_average_price" , 
    "article_cheapest_price" , 
    "article_most_expensive_price" , 
    "article_number_of_different_prices" , 
    "total_order_price" , 
    "different_sizes" , 
    "different_colors" , 
    "id" ,
    "returnquantity" 
    )
val newCustTestSchema = StructType(
    Array(
    StructField("voucherid" , DoubleType, true),
    StructField("colorcode" , DoubleType, true),
    StructField("deviceid" , DoubleType, true),
    StructField("day in month" , DoubleType, true),
    StructField("month_of_year" , DoubleType, true),
    StructField("day_of_week" , DoubleType, true),
    StructField("quarter" , DoubleType, true),
    StructField("paymentmethod" , DoubleType, true),
    StructField("has_voucher" , DoubleType, true),
    StructField("NewProductGroup" , DoubleType, true),
    StructField("NewSizeCode" , DoubleType, true),
    StructField("new_paymentmethod" , DoubleType, true),
    StructField("sizecode" , DoubleType, true),
    StructField("orderid" , DoubleType, true),
    StructField("articleid" , DoubleType, true),
    StructField("productgroup" , DoubleType, true),
    StructField("sizes" , DoubleType, true),
    StructField("orderdate" , DoubleType, true),
    StructField("colors" , DoubleType, true),
    StructField("year_and_month" , DoubleType, true),
    StructField("quantity" , DoubleType, true),
    StructField("price" , DoubleType, true),
    StructField("rrp" , DoubleType, true),
    StructField("voucheramount" , DoubleType, true),
    StructField("price_per_item" , DoubleType, true),
    StructField("price_to_rrp_ratio" , DoubleType, true),
    StructField("usual_price_ratio" , DoubleType, true),
    StructField("color_ral_group" , DoubleType, true),
    StructField("article_average_price" , DoubleType, true),
    StructField("article_cheapest_price" , DoubleType, true),
    StructField("article_most_expensive_price" , DoubleType, true),
    StructField("article_number_of_different_prices" , DoubleType, true),
    StructField("total_order_price" , DoubleType, true),
    StructField("different_sizes" , DoubleType, true),
    StructField("different_colors" , DoubleType, true),
    StructField("returnquantity" , DoubleType, true),
    StructField("id" , DoubleType, true)
        )
    )
val newTestLoad = sqlContext.read .format("com.databricks.spark.csv") .option("header", "true") .option("delimiter", ";") .schema(newCustTestSchema) .load("/home/axel/Skrivbord/allAttributesNumeric/dm2_train_and_test_v3.numeric/dm2_test_new_customers_v3.numeric.csv")
val newTest = newTestLoad.select(
    "voucherid" , 
    "colorcode" , 
    "deviceid" , 
    "day in month" , 
    "month_of_year" , 
    "day_of_week" , 
    "quarter" , 
    "paymentmethod" , 
    "has_voucher" , 
    "NewProductGroup" , 
    "NewSizeCode" , 
    "new_paymentmethod" , 
    "sizecode" , 
    "orderid" , 
    "articleid" , 
    "productgroup" , 
    "sizes" , 
    "colors" , 
    "year_and_month" , 
    "orderdate" , 
    "quantity" , 
    "price" , 
    "rrp" , 
    "voucheramount" , 
    "price_per_item" , 
    "price_to_rrp_ratio" , 
    "usual_price_ratio" , 
    "color_ral_group" , 
    "article_average_price" , 
    "article_cheapest_price" , 
    "article_most_expensive_price" , 
    "article_number_of_different_prices" , 
    "total_order_price" , 
    "different_sizes" , 
    "different_colors" , 
    "id" ,
    "returnquantity" 
    )
//Creates Vector of every Row and outputs as "feature"
val knownAssembler = new VectorAssembler().setInputCols(Array(
    "voucherid" , 
    "colorcode" , 
    "deviceid" , 
    "day in month" , 
    "month_of_year" , 
    "day_of_week" , 
    "quarter" , 
    "paymentmethod" , 
    "has_voucher" , 
    "NewProductGroup" , 
    "NewSizeCode" , 
    "new_paymentmethod" , 
    "sizecode" , 
    "orderid" , 
    "articleid" , 
    "productgroup" , 
    "sizes" , 
    "colors" , 
    "year_and_month" , 
    "orderdate" , 
    "quantity" , 
    "price" , 
    "rrp" , 
    "voucheramount" , 
    "price_per_item" , 
    "price_to_rrp_ratio" , 
    "usual_price_ratio" , 
    "color_ral_group" , 
    "article_average_price" , 
    "article_cheapest_price" , 
    "article_most_expensive_price" , 
    "article_number_of_different_prices" , 
    "total_order_price" , 
    "different_sizes" , 
    "different_colors"  ,
    "customerid" , 
    "color_returned_times" , 
    "color_bought_times" , 
    "color_returned_ratio" , 
    "size_returned_times" , 
    "size_bought_times" , 
    "size_returned_ratio" , 
    "customer_sum_quantities" , 
    "customer_sum_returns" , 
    "customer_return_ratio" ,
    "id"
    )
).setOutputCol("features")

val newAssembler = new VectorAssembler().setInputCols(Array(
    "voucherid" , 
    "colorcode" , 
    "deviceid" , 
    "day in month" , 
    "month_of_year" , 
    "day_of_week" , 
    "quarter" , 
    "paymentmethod" , 
    "has_voucher" , 
    "NewProductGroup" , 
    "NewSizeCode" , 
    "new_paymentmethod" , 
    "sizecode" , 
    "orderid" , 
    "articleid" , 
    "productgroup" , 
    "sizes" , 
    "colors" , 
    "year_and_month" , 
    "orderdate" , 
    "quantity" , 
    "price" , 
    "rrp" , 
    "voucheramount" , 
    "price_per_item" , 
    "price_to_rrp_ratio" , 
    "usual_price_ratio" , 
    "color_ral_group" , 
    "article_average_price" , 
    "article_cheapest_price" , 
    "article_most_expensive_price" , 
    "article_number_of_different_prices" , 
    "total_order_price" , 
    "different_sizes" , 
    "different_colors" , 
    "id"
    )
  ).setOutputCol("features")

val knownTr = knownAssembler.transform(knownTrain).select("features", "returnquantity")

val knownTe = knownAssembler.transform(knownTest).select("features", "returnquantity")

val newTr = knownAssembler.transform(knownTrain).select("features", "returnquantity")

val newTe = knownAssembler.transform(knownTest).select("features", "returnquantity")

val labeledKnownTr = knownTr.map(row => LabeledPoint(row.getDouble(1), row(0).asInstanceOf[Vector]))

val labeledKnownTe = knownTe.map(row => LabeledPoint(row.getDouble(1), row(0).asInstanceOf[Vector]))

val labeledNewTr = knownTr.map(row => LabeledPoint(row.getDouble(1), row(0).asInstanceOf[Vector]))

val labeledNewTe = knownTe.map(row => LabeledPoint(row.getDouble(1), row(0).asInstanceOf[Vector]))

//Will work with a proper encoding
val knownCategoricalFeaturesInfo = Map[Int, Int](
    //1 -> 267, 
    //2 -> 492, 
    3 -> 5, 
    4 -> 31, 
    5 -> 12, 
    6 -> 7, 
    7 -> 4, 
    8 -> 9, 
    9 -> 2, 
    10 -> 3, 
    11 -> 3, 
    12 -> 2, 
    13 -> 29, 
    //15 -> 3410, 
    16 -> 15, 
    //17 -> 154, 
    //18 -> 5406, 
    19 -> 19, 
    28 -> 6, 
    34 -> 6, 
    35 -> 9, 
    )
    
//Not finished
val newCategoricalFeaturesInfo = Map[Int, Int](
    1 -> 
    2 -> 
    3 -> 5
    4 -> 31
    5 -> 12
    6 -> 7
    7 -> 4
    8 -> 9
    9 -> 2
    10 -> 3
    11 -> 3
    12 -> 2
    13 -> 
    15 -> 
    16 -> 
    17 -> 
    18 -> 
    19 -> 
    28 -> 
    )

//Have fun :)